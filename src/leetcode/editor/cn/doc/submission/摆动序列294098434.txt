    class Solution {
        public int wiggleMaxLength(int[] nums) {
//            int n = nums.length;
//            if (n <= 2) {
//                return n == 2 && nums[0] == nums[1] ? 1 : n;
//            }
//            int dp[][] = new int[n][2];
//            dp[0][0] = 1;
//            if (nums[0] != nums[1]) {
//                dp[1][0] = 2;
//                if (nums[0] > nums[1]) {
//                    dp[1][1] = -1;
//                } else {
//                    dp[1][1] = 1;
//                }
//            } else {
//                dp[1][0] = 1;
//            }
//            int res = dp[1][0];
//            for (int i = 2; i < n; i++) {
//                for (int j = 1; j < i; j++) {
//                    if (nums[i] == nums[j]) {
//                        continue;
//                    }
//                    if (dp[j][1] == 0) {
//                        if (2 > dp[i][0]) {
//                            dp[i][0] = 2;
//                            dp[i][1] = nums[i] > nums[j] ? 1 : -1;
//                        }
//                    }
//                    if (nums[i] > nums[j] && dp[j][1] == -1) {
//                        if (dp[j][0] + 1 > dp[i][0]) {
//                            dp[i][0] = dp[j][0] + 1;
//                            dp[i][1] = 1;
//                        }
//                    }
//                    if (nums[i] < nums[j] && dp[j][1] == 1) {
//                        if (dp[j][0] + 1 > dp[i][0]) {
//                            dp[i][0] = dp[j][0] + 1;
//                            dp[i][1] = -1;
//                        }
//                    }
//                }
//                res = Math.max(res, dp[i][0]);
//            }
//            return res;
            int n = nums.length;
            int down = 1, up = 1;
            for (int i = 1; i < n; i++) {
                if (nums[i] > nums[i - 1]) {
                    up = down + 1;
                }
                if (nums[i] < nums[i - 1]) {
                    down = up + 1;
                }
            }
            return Math.max(down,up);
        }
    }

//runtime:0 ms
//memory:38.7 MB

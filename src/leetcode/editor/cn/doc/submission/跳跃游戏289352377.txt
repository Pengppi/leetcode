    class Solution {
        public boolean canJump(int[] nums) {
//            int n = nums.length;
//            boolean dp[] = new boolean[n];
//            dp[0] = true;
//            for (int i = 0; i < n; i++) {
//                if (dp[i] == true) {
//                    for (int j = 1; j <= nums[i] && i + j < n; j++) {
//                        if (i + j == n - 1) {
//                            return true;
//                        }
//                        dp[i + j] = true;
//                    }
//                }
//            }
//            return n == 1 ? true : false;

            int n = nums.length;
            int rightmost = 0;
            for (int i = 0; i < n; i++) {
                if (i <= rightmost) {
                    rightmost = Math.max(rightmost, i + nums[i]);
                    if (rightmost >= n - 1) {
                        return true;
                    }
                }
            }
            return false;
        }
    }

//runtime:2 ms
//memory:41.8 MB

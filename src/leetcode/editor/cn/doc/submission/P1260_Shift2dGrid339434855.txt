    class Solution {
        public List<List<Integer>> shiftGrid(int[][] grid, int k) {
            int m = grid.length, n = grid[0].length;
            List<List<Integer>> ans = new ArrayList<>();
            int tot = n * m;
            if (k >= tot) {
                k %= tot;
            }
            LinkedList<Integer> list = new LinkedList<>();
            for (int i = 0; i < tot; i++) {
                int r = i / n, c = i % n;
                list.add(grid[r][c]);
            }
            for (int i = tot - 1; i >= tot - k; i--) {
                int r = i / n, c = i % n;
                list.addFirst(grid[r][c]);
            }
            for (int i = 0; i < m; i++) {
                ans.add(new ArrayList<>(list.subList(i * n, (i + 1) * n)));
            }
            return ans;
        }
    }

//runtime:8 ms
//memory:42 MB
